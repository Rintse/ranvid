-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Syntax.Grammar.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Syntax.Grammar.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transExp :: Syntax.Grammar.Abs.Exp -> Result
transExp x = case x of
  Syntax.Grammar.Abs.EVar var -> failure x
  Syntax.Grammar.Abs.EDVal dval -> failure x
  Syntax.Grammar.Abs.Rand -> failure x
  Syntax.Grammar.Abs.Min exp -> failure x
  Syntax.Grammar.Abs.Sqrt exp -> failure x
  Syntax.Grammar.Abs.Sin exp -> failure x
  Syntax.Grammar.Abs.Cos exp -> failure x
  Syntax.Grammar.Abs.Mul exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Div exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Add exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Ite bexp exp1 exp2 -> failure x

transBExp :: Syntax.Grammar.Abs.BExp -> Result
transBExp x = case x of
  Syntax.Grammar.Abs.Eq exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Lt exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Gt exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Neq exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Leq exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Geq exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Not bexp -> failure x
  Syntax.Grammar.Abs.And bexp1 bexp2 -> failure x
  Syntax.Grammar.Abs.Or bexp1 bexp2 -> failure x

transVar :: Syntax.Grammar.Abs.Var -> Result
transVar x = case x of
  Syntax.Grammar.Abs.XVar -> failure x
  Syntax.Grammar.Abs.YVar -> failure x

transDVal :: Syntax.Grammar.Abs.DVal -> Result
transDVal x = case x of
  Syntax.Grammar.Abs.Val double -> failure x

transTrip :: Syntax.Grammar.Abs.Trip -> Result
transTrip x = case x of
  Syntax.Grammar.Abs.Triple exp1 exp2 exp3 -> failure x
