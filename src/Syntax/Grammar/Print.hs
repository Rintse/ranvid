-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for Syntax.

module Syntax.Grammar.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Syntax.Grammar.Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t, null spc, null rest) of
      (True , _   , True ) -> []             -- remove trailing space
      (False, _   , True ) -> t              -- remove trailing space
      (False, True, False) -> t ++ ' ' : s   -- add space if none
      _                    -> t ++ s
    where
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Syntax.Grammar.Abs.Ident where
  prt _ (Syntax.Grammar.Abs.Ident i) = doc $ showString i
instance Print Syntax.Grammar.Abs.Conj where
  prt _ (Syntax.Grammar.Abs.Conj i) = doc $ showString i
instance Print Syntax.Grammar.Abs.Disj where
  prt _ (Syntax.Grammar.Abs.Disj i) = doc $ showString i
instance Print Syntax.Grammar.Abs.TNot where
  prt _ (Syntax.Grammar.Abs.TNot i) = doc $ showString i
instance Print Syntax.Grammar.Abs.TEq where
  prt _ (Syntax.Grammar.Abs.TEq i) = doc $ showString i
instance Print Syntax.Grammar.Abs.TNeq where
  prt _ (Syntax.Grammar.Abs.TNeq i) = doc $ showString i
instance Print Syntax.Grammar.Abs.TLeq where
  prt _ (Syntax.Grammar.Abs.TLeq i) = doc $ showString i
instance Print Syntax.Grammar.Abs.TGeq where
  prt _ (Syntax.Grammar.Abs.TGeq i) = doc $ showString i
instance Print Syntax.Grammar.Abs.BConst where
  prt i = \case
    Syntax.Grammar.Abs.BTrue -> prPrec i 0 (concatD [doc (showString "true")])
    Syntax.Grammar.Abs.BFalse -> prPrec i 0 (concatD [doc (showString "false")])

instance Print Syntax.Grammar.Abs.Exp where
  prt i = \case
    Syntax.Grammar.Abs.Var id_ -> prPrec i 8 (concatD [prt 0 id_])
    Syntax.Grammar.Abs.DVal d -> prPrec i 8 (concatD [prt 0 d])
    Syntax.Grammar.Abs.BVal bconst -> prPrec i 8 (concatD [prt 0 bconst])
    Syntax.Grammar.Abs.Rand -> prPrec i 8 (concatD [doc (showString "rand")])
    Syntax.Grammar.Abs.Min exp -> prPrec i 7 (concatD [doc (showString "-"), prt 8 exp])
    Syntax.Grammar.Abs.Pow exp1 exp2 -> prPrec i 7 (concatD [prt 7 exp1, doc (showString "^"), prt 8 exp2])
    Syntax.Grammar.Abs.Mul exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "*"), prt 7 exp2])
    Syntax.Grammar.Abs.Div exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "/"), prt 7 exp2])
    Syntax.Grammar.Abs.Mod exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "%"), prt 7 exp2])
    Syntax.Grammar.Abs.Add exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "+"), prt 6 exp2])
    Syntax.Grammar.Abs.Sub exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "-"), prt 6 exp2])
    Syntax.Grammar.Abs.Eq exp1 teq exp2 -> prPrec i 4 (concatD [prt 4 exp1, prt 0 teq, prt 5 exp2])
    Syntax.Grammar.Abs.Lt exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "<"), prt 5 exp2])
    Syntax.Grammar.Abs.Gt exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString ">"), prt 5 exp2])
    Syntax.Grammar.Abs.Neq exp1 tneq exp2 -> prPrec i 4 (concatD [prt 4 exp1, prt 0 tneq, prt 5 exp2])
    Syntax.Grammar.Abs.Leq exp1 tleq exp2 -> prPrec i 4 (concatD [prt 4 exp1, prt 0 tleq, prt 5 exp2])
    Syntax.Grammar.Abs.Geq exp1 tgeq exp2 -> prPrec i 4 (concatD [prt 4 exp1, prt 0 tgeq, prt 5 exp2])
    Syntax.Grammar.Abs.Not tnot exp -> prPrec i 3 (concatD [prt 0 tnot, prt 4 exp])
    Syntax.Grammar.Abs.And exp1 conj exp2 -> prPrec i 2 (concatD [prt 2 exp1, prt 0 conj, prt 3 exp2])
    Syntax.Grammar.Abs.Or exp1 disj exp2 -> prPrec i 2 (concatD [prt 2 exp1, prt 0 disj, prt 3 exp2])
    Syntax.Grammar.Abs.Ite exp1 exp2 exp3 -> prPrec i 1 (concatD [doc (showString "if"), prt 2 exp1, doc (showString "then"), prt 2 exp2, doc (showString "else"), prt 2 exp3])
    Syntax.Grammar.Abs.Triple exp1 exp2 exp3 -> prPrec i 0 (concatD [doc (showString "("), prt 0 exp1, doc (showString ","), prt 0 exp2, doc (showString ","), prt 0 exp3, doc (showString ")")])
