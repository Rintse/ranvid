-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Syntax.Grammar.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Syntax.Grammar.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Syntax.Grammar.Abs.Ident -> Result
transIdent x = case x of
  Syntax.Grammar.Abs.Ident string -> failure x

transConj :: Syntax.Grammar.Abs.Conj -> Result
transConj x = case x of
  Syntax.Grammar.Abs.Conj string -> failure x

transDisj :: Syntax.Grammar.Abs.Disj -> Result
transDisj x = case x of
  Syntax.Grammar.Abs.Disj string -> failure x

transTNot :: Syntax.Grammar.Abs.TNot -> Result
transTNot x = case x of
  Syntax.Grammar.Abs.TNot string -> failure x

transTEq :: Syntax.Grammar.Abs.TEq -> Result
transTEq x = case x of
  Syntax.Grammar.Abs.TEq string -> failure x

transTNeq :: Syntax.Grammar.Abs.TNeq -> Result
transTNeq x = case x of
  Syntax.Grammar.Abs.TNeq string -> failure x

transTLeq :: Syntax.Grammar.Abs.TLeq -> Result
transTLeq x = case x of
  Syntax.Grammar.Abs.TLeq string -> failure x

transTGeq :: Syntax.Grammar.Abs.TGeq -> Result
transTGeq x = case x of
  Syntax.Grammar.Abs.TGeq string -> failure x

transBConst :: Syntax.Grammar.Abs.BConst -> Result
transBConst x = case x of
  Syntax.Grammar.Abs.BTrue -> failure x
  Syntax.Grammar.Abs.BFalse -> failure x

transExp :: Syntax.Grammar.Abs.Exp -> Result
transExp x = case x of
  Syntax.Grammar.Abs.Var ident -> failure x
  Syntax.Grammar.Abs.DVal double -> failure x
  Syntax.Grammar.Abs.BVal bconst -> failure x
  Syntax.Grammar.Abs.Rand -> failure x
  Syntax.Grammar.Abs.Min exp -> failure x
  Syntax.Grammar.Abs.Pow exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Mul exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Div exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Mod exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Add exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Sub exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Eq exp1 teq exp2 -> failure x
  Syntax.Grammar.Abs.Lt exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Gt exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Neq exp1 tneq exp2 -> failure x
  Syntax.Grammar.Abs.Leq exp1 tleq exp2 -> failure x
  Syntax.Grammar.Abs.Geq exp1 tgeq exp2 -> failure x
  Syntax.Grammar.Abs.Not tnot exp -> failure x
  Syntax.Grammar.Abs.And exp1 conj exp2 -> failure x
  Syntax.Grammar.Abs.Or exp1 disj exp2 -> failure x
  Syntax.Grammar.Abs.Ite exp1 exp2 exp3 -> failure x
  Syntax.Grammar.Abs.Triple exp1 exp2 exp3 -> failure x
