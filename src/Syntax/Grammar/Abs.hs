-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language grammar.

module Syntax.Grammar.Abs where

import Prelude (Double, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data BConst = BTrue | BFalse
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = Var Ident
    | DVal Double
    | BVal BConst
    | Rand
    | Min Exp
    | Pow Exp Exp
    | Mul Exp Exp
    | Div Exp Exp
    | Mod Exp Exp
    | Add Exp Exp
    | Sub Exp Exp
    | Eq Exp TEq Exp
    | Lt Exp Exp
    | Gt Exp Exp
    | Neq Exp TNeq Exp
    | Leq Exp TLeq Exp
    | Geq Exp TGeq Exp
    | Not TNot Exp
    | And Exp Conj Exp
    | Or Exp Disj Exp
    | Ite Exp Exp Exp
    | Triple Exp Exp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Conj = Conj String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Disj = Disj String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TNot = TNot String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TEq = TEq String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TNeq = TNeq String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TLeq = TLeq String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TGeq = TGeq String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

