-- File generated by the BNF Converter (bnfc 2.9.5).

-- | The abstract syntax of language grammar.

module Syntax.Grammar.Abs where

import Prelude (Double)
import qualified Prelude as C (Eq, Ord, Show, Read)

data Exp
    = EVar Var
    | EDVal DVal
    | Rand
    | Min Exp
    | Sqrt Exp
    | Sin Exp
    | Cos Exp
    | Mul Exp Exp
    | Div Exp Exp
    | Add Exp Exp
    | Ite BExp Exp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BExp
    = Eq Exp Exp
    | Lt Exp Exp
    | Gt Exp Exp
    | Neq Exp Exp
    | Leq Exp Exp
    | Geq Exp Exp
    | Not BExp
    | And BExp BExp
    | Or BExp BExp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Var = XVar | YVar
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DVal = DVal Double
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Trip = Triple Exp Exp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

